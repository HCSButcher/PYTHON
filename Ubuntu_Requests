import requests
import os
from urllib.parse import urlparse
import hashlib

def get_filename_from_url(url: str) -> str:
    
    parsed_url = urlparse(url)
    filename = os.path.basename(parsed_url.path)
    
    if not filename or "." not in filename:  # No extension â†’ generate
        file_hash = hashlib.md5(url.encode()).hexdigest()[:8]
        filename = f"image_{file_hash}.jpg"
    
    return filename

def main():
    print(" Welcome to the Ubuntu Image Fetcher")
    print("A tool for mindfully collecting images from the web\n")
    
    # Get URL(s) from user
    urls = input("Please enter one or more image URLs (separated by spaces): ").split()
    
    # Create directory if it doesn't exist
    os.makedirs("Fetched_Images", exist_ok=True)

    for url in urls:
        try:
            # Fetch the image
            response = requests.get(url, timeout=10, stream=True)
            response.raise_for_status()  # Raise exception for HTTP errors
            
            # Check Content-Type header to ensure it's an image
            content_type = response.headers.get("Content-Type", "")
            if not content_type.startswith("image/"):
                print(f" Skipped (not an image): {url}")
                continue
            
            # Extract filename
            filename = get_filename_from_url(url)
            filepath = os.path.join("Fetched_Images", filename)
            
            # Prevent duplicate downloads
            if os.path.exists(filepath):
                print(f"Skipped duplicate: {filename}")
                continue
            
            # Save the image in binary mode
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(1024):
                    f.write(chunk)
            
            print(f" Successfully fetched: {filename}")
            print(f"Image saved to {filepath}\n")
        
        except requests.exceptions.RequestException as e:
            print(f" Connection error while fetching {url}: {e}")
        except Exception as e:
            print(f" An error occurred with {url}: {e}")

    print(" Connection strengthened. Community enriched.")

if __name__ == "__main__":
    main()
